<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Red Hat Developer roundup: Best of June 2022</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/06/30/red-hat-developer-roundup-best-june-2022" /><author><name>Josh Fruhlinger</name></author><id>79a05456-6c28-4b45-a502-e09bbf2fab00</id><updated>2022-06-30T07:00:00Z</updated><published>2022-06-30T07:00:00Z</published><summary type="html">&lt;p&gt;Welcome to our monthly recap of the articles we published in June! This month, we rolled out an armada of articles to help you build—and lock down—code on the platforms you trust. Here are the June highlights.&lt;/p&gt; &lt;h2&gt;Security for Kubernetes, Go, and beyond&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; is increasingly central to modern distributed and &lt;a href="https://developers.redhat.com/topics/containers"&gt;containerized&lt;/a&gt; development today, but it's a complex system that's difficult to secure. Ajmal Kohgadai and Andy Oram delivered a three-part series on Kubernetes security to help put your mind at ease:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/13/kubernetes-security-risks-keep-developers-night"&gt;Kubernetes security risks that keep developers up at night&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/14/4-tips-achieving-better-security-kubernetes"&gt;4 tips for achieving better security on Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/15/best-practices-successful-devsecops"&gt;Best practices for successful DevSecOps&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Andy also rounded things out with a tour of &lt;a href="https://developers.redhat.com/articles/2022/06/20/8-open-source-kubernetes-security-tools"&gt;8 great open source Kubernetes security tools&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Red Hat Developer also took a look at security issues in the &lt;a href="http://Go"&gt;Go&lt;/a&gt; language. We provided a &lt;a href="https://developers.redhat.com/articles/2022/06/28/cross-site-scripting-explanation-and-prevention-go"&gt;primer on cross-site scripting&lt;/a&gt; that explained how you can prevent this type of attack when building applications in Go; we also showed you how to make sure your Go applications on RHEL &lt;a href="https://developers.redhat.com/articles/2022/05/31/your-go-application-fips-compliant"&gt;comply with the FIPS standard&lt;/a&gt; mandated for U.S. government contractors.&lt;/p&gt; &lt;p&gt;And finally, if you're dealing with good old-fashioned &lt;a href="https://developers.redhat.com/topics/c/"&gt;C&lt;/a&gt;, Serge Guelton and Siddhesh Poyarekar taught you how to &lt;a href="https://developers.redhat.com/articles/2022/06/02/use-compiler-flags-stack-protection-gcc-and-clang"&gt;use compiler flags to protect against stack-smashing attacks&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Dig deep into internals&lt;/h2&gt; &lt;p&gt;Some of our most popular articles of this month really got into the nitty-gritty of code execution, compilation, and performance monitoring. Thanks to Red Hat Developer's experts, you learned how to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use the GNU Debugger to &lt;a href="https://developers.redhat.com/articles/2022/06/07/how-debug-stack-frames-and-recursion-gdb"&gt;debug stack frames and recursion&lt;/a&gt;, a common cause of programming errors.&lt;/li&gt; &lt;li&gt;Use the Bunsen test suite to track down &lt;a href="https://developers.redhat.com/articles/2022/06/09/detecting-nondeterministic-test-cases-bunsen"&gt;"flaky" tests that produce different outcomes&lt;/a&gt; when run repeatedly.&lt;/li&gt; &lt;li&gt;Monitor the performance of &lt;a href="https://developers.redhat.com/articles/2022/06/22/measuring-bpf-performance-tips-tricks-and-best-practices"&gt;BPF programs&lt;/a&gt; that themselves inspect other system activity.&lt;/li&gt; &lt;li&gt;Reveal potential performance problems, down to individual lines of code, with &lt;a href="https://developers.redhat.com/articles/2022/06/27/use-systemtap-example-script-trace-kernel-code-operation"&gt;SystemTap and one of its prewritten example scripts&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;SaaS architectures&lt;/h2&gt; &lt;p&gt;We continued a series that we &lt;a href="https://developers.redhat.com/articles/2022/05/18/saas-architecture-checklist-kubernetes"&gt;began in May&lt;/a&gt; about building and deploying Software as a service (SaaS) applications, and these also proved to be a big hit with readers. This month, you learned how to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Convert an &lt;a href="articles/2022/06/16/how-convert-web-application-software-service"&gt;existing web application into a SaaS service&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Develop a &lt;a href="https://developers.redhat.com/articles/2022/06/23/multi-cloud-storage-strategies-saas-applications"&gt;multi-cloud storage strategy&lt;/a&gt; to accommodate different environments where your SaaS service might be deployed.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Check out these articles and be on the lookout for future installments.&lt;/p&gt; &lt;h2&gt;Instrument containerized Java applications with Cryostat&lt;/h2&gt; &lt;p&gt;You probably have used Java Flight Recorder, an excellent tool for analyzing and understanding &lt;a href="https://developers.redhat.com/topics/java"&gt;Java&lt;/a&gt; workloads. It comes in handy during development or while workloads run in production. Cryostat takes that further by bringing the same functionality to containers and Kubernetes. You can check out our &lt;a href=""&gt;roundup of what's new in Cryostat 2.1&lt;/a&gt;, the latest version of the tool. You can also learn how to &lt;a href="https://developers.redhat.com/articles/2022/06/20/install-cryostat-new-helm-chart"&gt;install Cryostat using a Helm chart&lt;/a&gt;, which is suitable for demo purposes and simpler than using the Cryostat Operator.&lt;/p&gt; &lt;h2&gt;June 2022 on Red Hat Developer&lt;/h2&gt; &lt;p&gt;Here's the full lineup of articles published on Red Hat Developer so far this month:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/05/31/integrate-spring-boot-application-red-hat-data-grid"&gt;Integrate a Spring Boot application with Red Hat Data Grid&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/05/31/your-go-application-fips-compliant"&gt;Is your Go application FIPS compliant?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/01/open-source-edge-detection-opencv-and-pachyderm"&gt;Open source edge detection with OpenCV and Pachyderm&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/01/join-red-hat-team-openjs-world-2022"&gt;Join the Red Hat team at OpenJS World 2022&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/02/how-create-kafka-consumers-and-producers-java"&gt;How to create Kafka consumers and producers in Java&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/02/use-compiler-flags-stack-protection-gcc-and-clang"&gt;Use compiler flags for stack protection in GCC and Clang&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/06/whats-new-version-27-red-hat-build-quarkus"&gt;What's new in version 2.7 of the Red Hat build of Quarkus&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/06/kafka-monthly-digest-may-2022"&gt;Kafka Monthly Digest: May 2022&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/07/thousands-pypi-and-rubygems-rpms-now-available-rhel-9"&gt;Thousands of PyPI and RubyGems RPMs now available for RHEL 9&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/07/how-debug-stack-frames-and-recursion-gdb"&gt;How to debug stack frames and recursion in GDB&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/08/eliminate-downtime-during-openshift-rolling-updates"&gt;Eliminate downtime during OpenShift rolling updates&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/08/9-awesome-updates-cryostat-21"&gt;9 awesome updates in Cryostat 2.1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/09/detecting-nondeterministic-test-cases-bunsen"&gt;Detecting nondeterministic test cases with Bunsen&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/09/get-started-red-hat-openshift-connectors"&gt;Get started with Red Hat OpenShift Connectors&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/13/quick-way-translate-physical-addresses-virtual-ones"&gt;A quick way to translate physical addresses into virtual ones&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/13/kubernetes-security-risks-keep-developers-night"&gt;Kubernetes security risks that keep developers up at night&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/13/use-openvino-convert-speech-text"&gt;Use OpenVINO to convert speech to text&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/14/4-tips-achieving-better-security-kubernetes"&gt;4 tips for achieving better security on Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/15/openssl-30-dealing-turkish-locale-bug"&gt;OpenSSL 3.0: Dealing with a Turkish locale bug&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/15/best-practices-successful-devsecops"&gt;Best practices for successful DevSecOps&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/16/learn-about-openshift-command-line-tools"&gt;Learn about OpenShift command-line tools&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/16/how-convert-web-application-software-service"&gt;How to convert a web application to Software-as-a-Service&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/20/install-cryostat-new-helm-chart"&gt;Install Cryostat with the new Helm chart&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/20/8-open-source-kubernetes-security-tools"&gt;8 open source Kubernetes security tools&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/21/distributed-tracing-opentelemetry-knative-and-quarkus"&gt;Distributed tracing with OpenTelemetry, Knative, and Quarkus&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/22/measuring-bpf-performance-tips-tricks-and-best-practices"&gt;Measuring BPF performance: Tips, tricks, and best practices&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/23/multi-cloud-storage-strategies-saas-applications"&gt;Multi-cloud storage strategies for SaaS applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/23/gpu-enablement-microshift"&gt;GPU enablement on MicroShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/24/road-jboss-eap-8"&gt;The road to JBoss EAP 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/27/use-systemtap-example-script-trace-kernel-code-operation"&gt;Use a SystemTap example script to trace kernel code operation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/28/cross-site-scripting-explanation-and-prevention-go"&gt;Cross-site scripting: Explanation and prevention with Go&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/06/29/how-add-libraries-nodejs-container-s2i"&gt;How to add libraries to a Node.js container with S2I&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/06/30/red-hat-developer-roundup-best-june-2022" title="Red Hat Developer roundup: Best of June 2022"&gt;Red Hat Developer roundup: Best of June 2022&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Josh Fruhlinger</dc:creator><dc:date>2022-06-30T07:00:00Z</dc:date></entry><entry><title>How to add libraries to a Node.js container with S2I</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/06/29/how-add-libraries-nodejs-container-s2i" /><author><name>Michael Dawson</name></author><id>2c02fc97-0cf3-45eb-a771-b0ae7fa2d218</id><updated>2022-06-29T07:00:00Z</updated><published>2022-06-29T07:00:00Z</published><summary type="html">&lt;p&gt;The &lt;a href="https://github.com/openshift/source-to-image"&gt;Source-to-Image&lt;/a&gt; (S2I) toolkit allows you to easily build application &lt;a href="https://developers.redhat.com/topics/containers"&gt;container&lt;/a&gt; images for &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;OpenShift&lt;/a&gt; deployment. Red Hat provides S2I images for a number of languages including &lt;a href="https://developers.redhat.com/topics/nodejs"&gt;Node.js&lt;/a&gt;. For example, this is the image for &lt;a href="https://catalog.redhat.com/software/containers/ubi8/nodejs-16/615aee9fc739c0a4123a87e1?container-tabs=overview"&gt;Node.js 16.x&lt;/a&gt;. To learn more about using the Red Hat images versus other Node.js images, check out the &lt;a href="https://developers.redhat.com/articles/2021/08/26/introduction-nodejs-reference-architecture-part-5-building-good-containers"&gt;Building good containers&lt;/a&gt; section of the Node.js reference architecture.&lt;/p&gt; &lt;p&gt;If you have an application with a &lt;code&gt;package.json&lt;/code&gt; that includes an &lt;code&gt;npm start&lt;/code&gt; command, deploying that application using &lt;a href="https://github.com/nodeshift/nodeshift"&gt;nodeshift&lt;/a&gt; (which supports S2I) can be as easy as running &lt;code&gt;nodeshift&lt;/code&gt; in the directory with the &lt;code&gt;package.json&lt;/code&gt;. It will package your application and deploy to your current OpenShift project.&lt;/p&gt; &lt;p&gt;Super easy, right? Well, most of the time. It might get a bit more complicated if your application uses native add-ons that need additional libraries not installed in the Node.js container image. For example, if you want to use the &lt;a href="https://www.npmjs.com/package/odbc"&gt;odbc&lt;/a&gt; package, you will need some ODBC libraries and the odbc client for the database you want to connect to. More specifically, if you want to use the odbc package with the MySQL database, install the additional libraries through the following RPMs:&lt;/p&gt; &lt;ul&gt; &lt;li aria-level="1"&gt;unixODBC&lt;/li&gt; &lt;li aria-level="1"&gt;mysql-connector-odbc&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So how do you pull all this off? The following steps worked for me:&lt;/p&gt; &lt;ol&gt; &lt;li aria-level="1"&gt;Building an image that extends the Node.js container image by adding the required RPMs.&lt;/li&gt; &lt;li aria-level="1"&gt;Deploying the application with Nodeshift and instructing it to use this image.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;We'll dive into these steps over the remainder of this article to show you how it's done.&lt;/p&gt; &lt;h2&gt;Build the extended image&lt;/h2&gt; &lt;p&gt;I used a &lt;code&gt;BuildConfig&lt;/code&gt; to build the extended image:&lt;/p&gt; &lt;pre&gt; &lt;code&gt; apiVersion: build.openshift.io/v1 kind: BuildConfig metadata: name: odbc-base spec: source: dockerfile: | FROM registry.access.redhat.com/ubi8/nodejs-16 USER 0 RUN curl https://repo.mysql.com/mysql80-community-release-el8-1.noarch.rpm &gt;mysql80-community-release-el8-1.noarch.rpm RUN dnf localinstall -y mysql80-community-release-el8-1.noarch.rpm RUN dnf install --nogpgcheck -y unixODBC mysql-connector-odbc RUN sed -i -e 's|Driver64=/usr/lib64/libmyodbc5.so|Driver64=/usr/lib64/libmyodbc8w.so|g' /etc/odbcinst.ini USER 1001 strategy: type: Docker output: to: kind: ImageStreamTag name: odbc-base:latest &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I saved that in &lt;code&gt;odbc-base.yaml&lt;/code&gt; and applied it with:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;oc apply -f odbc-base.yaml&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates a new OpenShift ImageStream named &lt;code&gt;odbc-base&lt;/code&gt;, which extends the base Node.js image (in the &lt;code&gt;FROM&lt;/code&gt; line) by installing the &lt;code&gt;unixODBC&lt;/code&gt; and &lt;code&gt;mysql-connector-odbc&lt;/code&gt; RPMs (&lt;code&gt;RUN dnf install --nogpgcheck -y unixODBC mysql-connector-odbc&lt;/code&gt;). The rest of the lines in the Dockerfile are either set up to make the RPMs available or a workaround for what appears to be a bug in the &lt;code&gt;mysql-connector-odbc&lt;/code&gt; installation.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;USER 0&lt;/code&gt; and &lt;code&gt;USER 1001&lt;/code&gt; lines are needed to set the user to root so that the &lt;code&gt;dnf&lt;/code&gt; commands can run, and then to set the user back to what is expected by the S2I image when it runs.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;localinstall&lt;/code&gt; commands are needed to add the repository from which the &lt;code&gt;mysql-connector-odbc&lt;/code&gt; RPM comes.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;sed&lt;/code&gt; command works around a bug in the &lt;code&gt;mysql-connector-odbc&lt;/code&gt; install where the &lt;code&gt;odbcinst.ini&lt;/code&gt; configuration file points to the wrong library for MySQL in the default install.&lt;/p&gt; &lt;p&gt;Once I applied the build config with &lt;code&gt;oc apply -f odbc-base.yaml&lt;/code&gt;, I completed the following steps as an Administrator in the OpenShift GUI:&lt;/p&gt; &lt;ol&gt; &lt;li aria-level="1"&gt;Create an image stream named &lt;code&gt;odbc-base&lt;/code&gt;. If you don’t do this, the build in step 2 will wait for the image stream before starting.&lt;/li&gt; &lt;li aria-level="1"&gt;Start a build for the build config making &lt;code&gt;odbc-base:latest&lt;/code&gt; available.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Deploy with the extended image&lt;/h2&gt; &lt;p&gt;Once you have the extended image in OpenShift as the &lt;code&gt;odbc-base&lt;/code&gt; image stream, deploy it as follows:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;nodeshift --imageStream=odbc-base&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;If you ever wondered how to handle Node.js packages that require additional system libraries using S2I, I hope this article has helped. Only a few additional steps are required, and you are back to a single &lt;a href="https://github.com/nodeshift/nodeshift"&gt;nodeshift&lt;/a&gt; install.&lt;/p&gt; &lt;p&gt;If you want to learn more about what Red Hat is up to on the Node.js front, check out our &lt;a href="https://developers.redhat.com/topics/nodejs"&gt;Node.js landing page&lt;/a&gt; or the &lt;a href="https://developers.redhat.com/blog/2021/03/08/introduction-to-the-node-js-reference-architecture-part-1-overview"&gt;Node.js reference architecture series&lt;/a&gt;.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/06/29/how-add-libraries-nodejs-container-s2i" title="How to add libraries to a Node.js container with S2I"&gt;How to add libraries to a Node.js container with S2I&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Michael Dawson</dc:creator><dc:date>2022-06-29T07:00:00Z</dc:date></entry><entry><title>Sharing your Container Development Environment with Red Hat Openshift Dev Spaces (formerly CodeReady Workspaces)</title><link rel="alternate" href="https://developers.redhat.com/crw-fmi" /><author><name>dtidwell</name></author><id>af4274f5-76c8-4ea9-9b15-4149731024ce</id><updated>2022-06-29T01:49:57Z</updated><published>2022-06-29T01:49:57Z</published><summary type="html" /><dc:creator>dtidwell</dc:creator><dc:date>2022-06-29T01:49:57Z</dc:date></entry><entry><title>Hello World for Red Hat OpenShift Dev Spaces (formerly CodeReady Workspaces)</title><link rel="alternate" href="https://developers.redhat.com/crw-hw" /><author><name>dtidwell</name></author><id>fa238d90-bc15-45f4-9d0a-386dd4082a59</id><updated>2022-06-29T01:49:40Z</updated><published>2022-06-29T01:49:40Z</published><summary type="html">&lt;h2&gt;About This Page&lt;/h2&gt; &lt;p&gt;This page has two parts:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Install OpenShift Dev Spaces (Dev Spaces).&lt;/li&gt; &lt;li&gt;Get a "Hello World" example application open in OpenShift Dev Spaces.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Install via Operator Hub&lt;/h2&gt; &lt;p&gt;There is a recommended method for creating an OpenShift Dev Spaces instance in your OpenShift cluster. Explore&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_dev_spaces/3.0/html-single/administration_guide/index#preparing-the-installation"&gt; the administrative guide&lt;/a&gt; for more information.&lt;/p&gt; &lt;h2&gt;Install via command line&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Important note: Creating the OpenShift Dev Spaces instance using the command line is supported for versions of OpenShift 4.10 or higher. It is recommended that you use the OpenShift Dev Spaces Operator, located in the Operator Hub, to install Dev Spaces.&lt;/strong&gt;&lt;/p&gt; &lt;h3 id="install-to-ocp-or-osd_download-and-unpack-the-deployment-script"&gt;1. Download and install the command line tool, &lt;code class="code-style"&gt;dsc&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;&lt;em&gt;3 minutes&lt;/em&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Navigate to &lt;a href="https://developers.redhat.com/products/openshift-dev-spaces/download"&gt;https://developers.redhat.com/products/openshift-dev-spaces/download&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Download the OpenShift Dev Spaces CLI management tool archive for version 3.0.&lt;/li&gt; &lt;li&gt;Extract the archive.&lt;/li&gt; &lt;li&gt;Place the extracted binary in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;h3 id="install-to-ocp-or-osd_run-the-deployment-script"&gt;2. Use &lt;code class="code-style"&gt;dsc&lt;/code&gt; to create an OpenShift Dev Spaces instance in your cluster&lt;/h3&gt; &lt;p&gt;&lt;em&gt;10 minutes&lt;/em&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log into your OpenShift cluster with cluster-admin rights.&lt;/li&gt; &lt;li&gt;From your command line, run the command:  &lt;pre&gt; &lt;code&gt;dsc server:start&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This will create an OpenShift Dev Spaces instance in the OpenShift namespace/project `openshift-devspaces` (which will be created if it does not exist). When it is finished, the Dev Spaces URL will be returned.&lt;/p&gt; &lt;h2&gt;Run a sample workspace&lt;/h2&gt; &lt;p&gt;After logging in to your Dev Spaces instance, select any sample project.&lt;/p&gt; &lt;h2&gt;Run a workspace for your own Git project&lt;/h2&gt; &lt;p&gt;After logging in to your Dev Spaces instance, enter the Git Repo URL and click `Create &amp; Open`. If your project does not already include a devfile.yaml, a default configuration will be loaded. To learn more about devfiles, see &lt;a href="https://devfile.io/docs/devfile/2.1.0/user-guide/" target="_blank"&gt;https://devfile.io/docs/devfile/2.1.0/user-guide/&lt;/a&gt;&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/crw-hw" title="Hello World for Red Hat OpenShift Dev Spaces (formerly CodeReady Workspaces)"&gt;Hello World for Red Hat OpenShift Dev Spaces (formerly CodeReady Workspaces)&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>dtidwell</dc:creator><dc:date>2022-06-29T01:49:40Z</dc:date></entry><entry><title>Debugging natively compiled Java code with NativeJDB</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/nativejdb-debugger-for-native-images/&#xA;            " /><author><name>Mandana Vaziri (https://twitter.com/mandana_vaziri)</name></author><id>https://quarkus.io/blog/nativejdb-debugger-for-native-images/</id><updated>2022-06-29T00:00:00Z</updated><published>2022-06-29T00:00:00Z</published><summary type="html">Co-authored by: Ansu Varghese, Research Software Engineer, IBM In collaboration with: Max Andersen, Dimitris Andreadis, Andrew Dinn, Stuart Douglas, Jason Greene, David Grove, David Lloyd, Thomas Qvarnstrom, Foivos Zakkak, Galder Zamarreno (IBM Research and Red Hat) Quarkus is a cloud-native Java development framework, which allows Java code to be mapped...</summary><dc:creator>Mandana Vaziri (https://twitter.com/mandana_vaziri)</dc:creator><dc:date>2022-06-29T00:00:00Z</dc:date></entry><entry><title type="html">Kogito 1.23.0 released!</title><link rel="alternate" href="https://blog.kie.org/2022/06/kogito-1-23-0-released.html" /><author><name>Cristiano Nicolai</name></author><id>https://blog.kie.org/2022/06/kogito-1-23-0-released.html</id><updated>2022-06-28T08:38:11Z</updated><content type="html">We are glad to announce that the Kogito 1.23.0 release is now available! This goes hand in hand with , release. From a feature point of view, we have included a series of new features and bug fixes, including: * Added endpoint to get source file content from a specific workflow * Added the get workflow source to the data index gateway API. * Token propagation support for OpenAPI extension * Runtime persistence now allows using Java serialization instead of protobuf definitions * gRPC operation type to Serverless functions BREAKING CHANGES * Source files add-on rest endpoint URL have been changed from ‘/management/process/{Id}/sources’ to ‘/management/processes/{processId}/sources’ to be aligned with the other management rest endpoints. * Removed deprecated add-ons, for a mapping of new artifact id visit . For more details head to the complete . All artifacts are available now: * Kogito runtime artifacts are available on Maven Central. * Kogito examples can be found . * Kogito images are available on . * Kogito operator is available in the in OpenShift and Kubernetes. * Kogito tooling 0.20.0 artifacts are available at the . A detailed changelog for 1.23.0 can be found in . New to Kogito? Check out our website . Click the "Get Started" button. The post appeared first on .</content><dc:creator>Cristiano Nicolai</dc:creator></entry><entry><title>Cross-site scripting: Explanation and prevention with Go</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/06/28/cross-site-scripting-explanation-and-prevention-go" /><author><name>Sandipan Roy</name></author><id>ce361d82-7976-4221-8939-abdc16e1a282</id><updated>2022-06-28T07:00:00Z</updated><published>2022-06-28T07:00:00Z</published><summary type="html">&lt;p&gt;Have you ever encountered a pop-up when visiting a web page or browsing a particular item on a site? Imagine if these pop-ups were carriers that delivered malicious payloads to your devices or captured confidential information. This is a type of cyber attack called &lt;em&gt;cross-site scripting,&lt;/em&gt; or XSS. Cross-site scripting is one of the most common attacks in 2022, and it made the &lt;a href="https://owasp.org/www-project-top-ten/"&gt;OWASP top 10&lt;/a&gt; web application security risks. Let's take a tour of cross-site scripting and learn how an attacker executes malicious JavaScript code on input parameters, creates pop-ups to deface web applications, and can hijack an active user session.&lt;/p&gt; &lt;h3&gt;How JavaScript is used in XSS attacks&lt;/h3&gt; &lt;p&gt;A dynamic web application is set up with three key features:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;HTML specifies the complete structure.&lt;/li&gt; &lt;li&gt;CSS configures the overall look and feel.&lt;/li&gt; &lt;li&gt;JavaScript adds powerful interactions to the application, such as warning popups, rollover effects, drop-down menus, and more.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;JavaScript is the most popular scripting language. 95% of all websites are built and run via JavaScript. It implements interesting and powerful interactive features, and acts according to the user's actions.&lt;/p&gt; &lt;p&gt;Actions associated with executing JavaScript code include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;onclick&lt;/code&gt;: Executes JavaScript when the user clicks on a box or link.&lt;/li&gt; &lt;li&gt;&lt;code&gt;onload&lt;/code&gt;: Executes JavaScript after a web page or image is completely loaded. An example: &lt;pre&gt; &lt;code&gt;&lt;body onload=alert('Welcome to Red Hat')&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;onmouseover&lt;/code&gt;: Triggers JavaScript when the mouse passes over a URL link. An example: &lt;pre&gt; &lt;code&gt;&lt;a onmouseover=alert("redhat.com")&gt;Contribute&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;onmouseout&lt;/code&gt;: Triggers JavaScript if the mouse moves out of the window without clicking a URL.&lt;/li&gt; &lt;li&gt;&lt;code&gt;onunload&lt;/code&gt;: Triggers JavaScript when the user leaves the web page by closing the browser or clicking a link.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;XSS is a client-side code injection attack. In this kind of attack, websites are injected with malicious JavaScript code. XSS occurs when input parameters have not been correctly handled or validated in web applications, which allows an attacker to send malicious JavaScript code to a different end user. The end user's browser does not recognize it as a malicious script and falls into the XSS trap. This type of attack does not threaten users directly with a payload, but the attacker targets the XSS vulnerability by injecting a malicious script on a web page that seems to be a real part of the website. Thus, when any user visits this website, the XSS-afflicted website sends malicious JavaScript code to the user's browser without their knowledge.&lt;/p&gt; &lt;h2&gt;Types of XSS attacks&lt;/h2&gt; &lt;p&gt;There are a variety of types of XSS attacks, divided into three major categories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Stored XSS,&lt;/strong&gt; also known as &lt;em&gt;permanent&lt;/em&gt; or type I XSS. In stored attacks, target servers store the injected script forever. The scripts maybe be stored in a database, on servers, or in forum comments. The victim unwittingly downloads that stored script from the server when attempting to access these resources.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Reflected XSS,&lt;/strong&gt; also known as type-II or &lt;em&gt;non-persistent XSS.&lt;/em&gt; These attacks happen when a web application instantly acknowledges the user's input without inspecting what has been entered. The attacker sends a malicious link via phishing to trick the user, and not store it on the webserver. There are two major types of reflected XSS: reflected XSS GET and reflected XSS POST.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;DOM-based XSS:&lt;/strong&gt; DOM-based XSS is a well-known vulnerability that happens in a document object model (DOM). The DOM defines web page segments such as the title, heading, table, forms, or a well-structured HTML page. If HTML documents are loaded into a web browser, they are transformed into a document object.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;3 defense strategies for XSS attacks&lt;/h2&gt; &lt;p&gt;Preventing cross-site scripting (XSS) attacks can be complicated, but these basic defense strategies are effective.&lt;/p&gt; &lt;h3&gt;Have a content security policy&lt;/h3&gt; &lt;p&gt;A content security policy (CSP) is a browser feature that allows you to create source lists for client-side web application resources, including JavaScript, CSS, and images. The CSP directs the browser to execute or display resources from specific sources using a special HTTP header.&lt;/p&gt; &lt;p&gt;In this example, the server only allows access to documents that are loaded over HTTPS via the single origin developers.redhat.com:&lt;/p&gt; &lt;pre&gt; &lt;code&gt; Content-Security-Policy: default-src https://developers.redhat.com &lt;/code&gt; &lt;/pre&gt; &lt;h3&gt;Deploy the X-XSS-Protection header&lt;/h3&gt; &lt;p&gt;The XSS filter in recent web browsers is enabled by the X-XSS-Protection HTTP response header. Because the header is normally enabled by default, its function is to re-enable the filter for a specific website if the user has disabled it.&lt;/p&gt; &lt;h3&gt;Make use of modern development frameworks&lt;/h3&gt; &lt;p&gt;Modern JavaScript frameworks like AngularJS and ReactJS, along with server-side templating systems like Go Templates, offer good protection against reflected cross-site scripting.&lt;/p&gt; &lt;h2&gt;Vulnerable code examples&lt;/h2&gt; &lt;p&gt;In the previous sections, we examined JavaScript and its vulnerabilities. But a secure backend system like Go's &lt;a href="https://pkg.go.dev/net/http"&gt;HTTP Package&lt;/a&gt; can block misleading JavaScript functionality. Let's use this package to illustrate some analytic techniques.&lt;/p&gt; &lt;p&gt;In our first example, the &lt;code&gt;server()&lt;/code&gt; method reads the parameter &lt;code&gt;XYZ&lt;/code&gt; from the query string and returns it in the HTTP response. This method also handles HTTP GET requests. The &lt;a href="https://golang.org/pkg/net/http/#DetectContentType"&gt;http.DetectContentType&lt;/a&gt; function determines the default &lt;code&gt;content-type&lt;/code&gt; response header.&lt;/p&gt; &lt;pre&gt; &lt;code&gt; package main import "io" import "net/http" func server(w http.ResponseWriter, r *http.Request) { io.WriteString(w, r.URL.Query().Get("XYZ")) } func main() { http.HandleFunc("/", server) http.ListenAndServe(":5000", nil) } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;content-type&lt;/code&gt; is set to &lt;code&gt;text/plain&lt;/code&gt; when delivering a payload with &lt;code&gt;XYZ=OpenSource&lt;/code&gt;, as you can see using a browser's developer tool (see Figure 1). This is not dangerous and is presented by the browser as plain text.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/crossScript-image1.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/crossScript-image1.png?itok=ynwMjnaN" width="600" height="389" alt="Firefox developer tool" loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Firefox developer tool shows the network header request. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 1: Firefox's developer tool shows the network header request.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;When I submit a request using &lt;code&gt;XYZ=&lt;script&gt;alert("RedHat")&lt;/script&gt;&lt;/code&gt;, the response's &lt;code&gt;Content-Type&lt;/code&gt; is set to &lt;code&gt;text/html&lt;/code&gt;, exposing the user to a cross-site scripting attack (see Figure 2).&lt;/p&gt; &lt;figure role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/crossScript-img2.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/crossScript-img2.png?itok=HUx0HLQg" width="600" height="386" alt="Firefox developer tool" loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: Executing our malicious JavaScript code processed by the backend. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;This JavaScript delivery can do harmful things, and we must fix it. Fortunately, changing a simple package in Go can prevent it.&lt;/p&gt; &lt;p&gt;The example vulnerability can be minimized by encoding the user-controlled parameter's output. Several output encoding routines are included in the &lt;code&gt;html/template package&lt;/code&gt; in Go. The problem in this example can be solved by using the &lt;code&gt;HTMLEscapeString&lt;/code&gt; method to perform output encoding on the user-supplied input:&lt;/p&gt; &lt;pre&gt; &lt;code&gt; import "io" import "net/http" func server(w http.ResponseWriter, r * http.Request) { encodedParam = template.HTMLEscapeString(r.URL.Query().Get("XYZ")) io.WriteString(w, encodedParam) } func main() { http.HandleFunc("/", server) http.ListenAndServe(":8080", nil) } &lt;/code&gt; &lt;/pre&gt; &lt;p&gt;Now let's consider a second example. The &lt;code&gt;server()&lt;/code&gt; function reads the parameter error from the query string and adds it to the template (&lt;code&gt;text/template module&lt;/code&gt;) that handles HTTP GET requests. The &lt;a href="https://golang.org/pkg/net/http/#DetectContentType"&gt;http.DetectContentType&lt;/a&gt; function determines the default &lt;code&gt;content-type&lt;/code&gt; response header.&lt;/p&gt; &lt;pre&gt; &lt;code&gt; import "net/http" import "text/template" func server(w http.ResponseWriter, r *http.Request) { error := r.URL.Query().Get("XYZ") tmpl := template.New("ERROR") tmpl, _ = tmpl.Parse(`{{define "T"}}{{.}}{{end}}`) tmpl.ExecuteTemplate(w, "T", error) } func main() { http.HandleFunc("/", server) http.ListenAndServe(":5000", nil) } &lt;/code&gt; &lt;/pre&gt; &lt;p&gt;When I submit a request using &lt;code&gt;XYZ=&lt;script&gt;alert("RedHat")&lt;/script&gt;&lt;/code&gt;, the response's &lt;code&gt;content-type&lt;/code&gt; sets to &lt;code&gt;text/html&lt;/code&gt;, exposing the user to cross-site scripting, as shown in Figure 3.&lt;/p&gt; &lt;figure role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/crossScript-img3.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/crossScript-img3.png?itok=TfJK8Qa5" width="600" height="385" alt="Firefox developer tool" loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3: Executing the malicious JavaScript code and successfully injecting our code. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;To fix this vulnerable code, replace the &lt;code&gt;text/template&lt;/code&gt; import with &lt;code&gt;html/template&lt;/code&gt; with built-in output encoding capabilities:&lt;/p&gt; &lt;pre&gt; &lt;code&gt; import "net/http" import "html/template" func server(w http.ResponseWriter, r *http.Request) { error: = r.URL.Query().Get("XYZ") tmpl: = template.New("ERROR") tmpl, _ = tmpl.Parse(`{{define "T"}}{{.}}{{end}}`) tmpl.ExecuteTemplate(w, "T", error) } func main() { http.HandleFunc("/", server) http.ListenAndServe(":5000", nil) }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When a request with &lt;code&gt;XYZ=&lt;script&gt;alert("RedHat")&lt;/script&gt;&lt;/code&gt; is sent, the updated code successfully encodes the payload (see Figure 4). The fixed backend code has successfully filtered the attack, preventing it from executing malicious JavaScript code.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/crossScript-img4.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/crossScript-img4.png?itok=fWEdg0EM" width="600" height="386" alt="Firefox developer tool" loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4: Executing malicious JavaScript code but backend blocked the request. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 4: The backend blocks a request for malicious JavaScript code.&lt;/figcaption&gt; &lt;/figure&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Cutting-edge programming languages like Go make it easy to fix security issues such as cross-site scripting, server-side request forgery, and comment injections. With secure coding practices and continuous security testing, you can prevent various cyber-attacks. Learn more about secure coding practice by reviewing the &lt;a href="https://github.com/OWASP/Go-SCP"&gt;OWASP secure coding practice guide&lt;/a&gt;, or read &lt;a href="https://nostarch.com/blackhatgo"&gt;Black Hat Go&lt;/a&gt; for information about security penetration testing.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/06/28/cross-site-scripting-explanation-and-prevention-go" title="Cross-site scripting: Explanation and prevention with Go"&gt;Cross-site scripting: Explanation and prevention with Go&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Sandipan Roy</dc:creator><dc:date>2022-06-28T07:00:00Z</dc:date></entry><entry><title type="html">How to build GraphQL applications with Quarkus</title><link rel="alternate" href="http://www.mastertheboss.com/soa-cloud/quarkus/how-to-build-graphql-applications-with-quarkus/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/soa-cloud/quarkus/how-to-build-graphql-applications-with-quarkus/</id><updated>2022-06-27T07:13:00Z</updated><content type="html">GraphQL is an open-source query and data manipulation language for APIs. This article shows how to create and deploy a sample application using a Quarkus Runtime What is GraphQL? GraphQL is Query language for reading and mutating data in APIs. As a back-end developer, GraphQL provides a type system where you can describe a schema ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>Use a SystemTap example script to trace kernel code operation</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/06/27/use-systemtap-example-script-trace-kernel-code-operation" /><author><name>William Cohen</name></author><id>4fb43103-07ae-4807-898e-53be38312be1</id><updated>2022-06-27T07:00:00Z</updated><published>2022-06-27T07:00:00Z</published><summary type="html">&lt;p&gt;&lt;a href="https://sourceware.org/systemtap/"&gt;SystemTap&lt;/a&gt; allows developers to add instrumentation to &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; systems to better understand the behavior of the kernel as well as userspace applications and libraries. This article, the first in a two-part series, shows how SystemTap can reveal potential performance problems down to individual lines of code. The second part of the series will describe how a SystemTap performance monitoring script was written.&lt;/p&gt; &lt;h2&gt;The SystemTap examples repository&lt;/h2&gt; &lt;p&gt;Writing a program from scratch in an unfamiliar language can be daunting. To make it easier for people to use SystemTap, the project provides a &lt;a href="https://sourceware.org/git/?p=systemtap.git;a=tree;f=testsuite/systemtap.examples"&gt;collection of examples&lt;/a&gt;. Some investigate common system issues. Other examples are there to demonstrate particular SystemTap features.&lt;/p&gt; &lt;p&gt;To provide a bit of structure and make it easier to locate desired scripts out of the approximately 200 SystemTap examples, they are divided into subdirectories. Additionally, each of the examples has associated keywords such as "NETWORK", "DISK", "NFS", and "PROCESS." These keywords are used to create &lt;a href="https://sourceware.org/systemtap/examples/keyword-index.html"&gt;indexes&lt;/a&gt; that make it easier to find a script that implements the instrumentation you are interested in or provides a good starting point for your particular needs.&lt;/p&gt; &lt;p&gt;For example, suppose you want to better understand a section of code and where it is taking a lot of execution time. Other tools on Linux, such as &lt;code&gt;perf&lt;/code&gt;, can identify the hot spots in the code, but you might like to have some additional information about the control flow in the program. You look at the examples associated with the PROFILING keyword and find a &lt;a href="https://sourceware.org/systemtap/examples/profiling/linetimes.stp"&gt;&lt;code&gt;linetimes.stp&lt;/code&gt; script&lt;/a&gt; that looks promising. This article shows how to use this script as an illustration of SystemTap's capabilities as well as preparation for the programming guidelines in the second part of the series.&lt;/p&gt; &lt;h2&gt;Profiling with linetime.stp&lt;/h2&gt; &lt;p&gt;SystemTap examples are installed as part of the systemtap-client RPM in the &lt;code&gt;/usr/share/systemtap/examples&lt;/code&gt; directory in &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; and &lt;a href="https://fedoraproject.org"&gt;Fedora&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;linetimes.stp&lt;/code&gt; script takes two arguments. The first argument determines whether the kernel, a kernel module, or a user-space binary is being monitored. The second argument is the name of the function being monitored.&lt;/p&gt; &lt;p&gt;To get a better understanding of the &lt;code&gt;nfsd4_open&lt;/code&gt; function in the kernel file &lt;code&gt;fs/nfsd/nfs4proc.c&lt;/code&gt;, I ran the following command on a Red Hat Enterprise Linux 8 machine running as an NFS server. The &lt;code&gt;--example&lt;/code&gt; option indicates that the script is in the examples directory. Because the NFS server code is compiled as the &lt;code&gt;nfsd&lt;/code&gt; module, the command needs to specify the code location with &lt;code&gt;module("nfsd")&lt;/code&gt;. Core kernel code would be specified as &lt;code&gt;kernel&lt;/code&gt;. The function name, &lt;code&gt;nfsd4_open&lt;/code&gt;, follows on the command line. The &lt;code&gt;-c "sleep 10"&lt;/code&gt; argument runs the script for 10 seconds and then exits:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ sudo stap --example linetimes.stp 'module("nfsd")' nfsd4_open -c "sleep 10"&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I got the following output from the script. The opening line states that the function was called 12 times. Looking through the times listed for the regions, I see that one line, 418, stands out as being very expensive with an average runtime of 3,937 microseconds:&lt;/p&gt; &lt;pre&gt; &lt;code class="none"&gt;module("nfsd") nfsd4_open call count: 12 region avg(us) max(us) module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:352") 2 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:353") 2 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:354") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:357") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:358") 6 8 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:365") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:368") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:373") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:374") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:378") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:382") 5 18 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:383") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:395") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:397") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:402") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:403") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:408") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:411") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:415") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:418") 3937 8962 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:419") 8 16 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:431") 5 5 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:432") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:453") 5 7 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:454") 2 3 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:457") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:460") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:461") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:462") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:463") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:465") 1 3 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:466") 1 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:467") 1 2&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The source file containing this line is:&lt;/p&gt; &lt;pre&gt; &lt;code class="none"&gt;/usr/src/debug/kernel-4.18.0-375.el8/linux-4.18.0-375.el8.x86_64/fs/nfsd/nfs4proc.c&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A few relevant lines from the source code follow:&lt;/p&gt; &lt;pre&gt; &lt;code class="none"&gt;415 switch (open-&gt;op_claim_type) { 416 case NFS4_OPEN_CLAIM_DELEGATE_CUR: 417 case NFS4_OPEN_CLAIM_NULL: 418 status = do_open_lookup(rqstp, cstate, open, &amp;resfh); 419 if (status) 420 goto out; 421 break; 422 case NFS4_OPEN_CLAIM_PREVIOUS: 423 status = nfs4_check_open_reclaim(cstate-&gt;clp); 424 if (status) 425 goto out; 426 open-&gt;op_openowner-&gt;oo_flags |= NFS4_OO_CONFIRMED; 427 reclaim = true; 428 /* fall through */ 429 case NFS4_OPEN_CLAIM_FH: 430 case NFS4_OPEN_CLAIM_DELEG_CUR_FH: 431 status = do_open_fhandle(rqstp, cstate, open); 432 if (status) 433 goto out; 434 resfh = &amp;cstate-&gt;current_fh; 435 break;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A look at the source file reveals that line 418 contains a &lt;code&gt;do_open_lookup&lt;/code&gt; function call. To find out why the call is happening so often, it would make sense to perform the steps shown in this section on that function, but we won't pursue the matter further in this article.&lt;/p&gt; &lt;p&gt;Following the timing information, the script outputs a control flow graph. Each line of output shows the module name followed by information about the executing statement: the function name followed by an ampersand, the filename followed by a colon, and the line number within the filename. A &lt;code&gt;from&lt;/code&gt; line is generated for each statement that runs, followed by a list of indented &lt;code&gt;to&lt;/code&gt; lines indicating the statements that followed at various times.&lt;/p&gt; &lt;p&gt;The following output shows that much of the control flow in the function is linear, because each &lt;code&gt;from&lt;/code&gt; line is followed by a single &lt;code&gt;to&lt;/code&gt; destination. A linear flow is also suggested when the number of times a line runs is 12, the same as the function itself. However, some &lt;code&gt;from&lt;/code&gt; statements are followed by more than one &lt;code&gt;to&lt;/code&gt; destination, indicating a branch:&lt;/p&gt; &lt;pre&gt; &lt;code class="none"&gt;control flow graph information from to ======================= module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:352") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:353") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:353") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:354") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:354") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:357") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:357") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:358") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:358") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:365") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:365") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:368") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:368") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:373") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:373") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:374") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:374") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:378") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:378") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:382") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:382") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:383") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:383") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:395") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:395") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:397") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:397") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:402") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:402") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:403") 6 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:408") 6 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:403") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:408") 6 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:408") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:411") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:411") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:415") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:415") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:418") 8 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:431") 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:418") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:419") 6 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:461") 2 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:419") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:461") 6 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:431") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:432") 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:432") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:453") 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:453") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:454") 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:454") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:457") 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:457") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:460") 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:460") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:465") 4 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:461") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:462") 8 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:462") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:463") 8 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:463") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:465") 8 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:465") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:466") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:466") module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:467") 12 module("nfsd").statement("nfsd4_open@fs/nfsd/nfs4proc.c:467") module("nfsd").function("nfsd4_open@fs/nfsd/nfs4proc.c:350").return 12&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In particular, note the first &lt;code&gt;from&lt;/code&gt; line for &lt;code&gt;nfsd4_open@fs/nfsd/nfs4proc.c&lt;/code&gt;, line 415. This line is a switch statement that invokes &lt;code&gt;nfsd4_open@fs/nfsd/nfs4proc.c&lt;/code&gt;, line 418, 8 times, and invokes &lt;code&gt;nfsd4_open@fs/nfsd/nfs4proc.c&lt;/code&gt;, line 431, 4 times. Lines 418 and 431 are different case statements in the switch-case statement. This information can be used to better understand the paths through the code.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;SystemTap offers many example scripts out of the box to help uncover potential system problems. The example index helps you find appropriate scripts. These existing scripts can be easily run, as demonstrated in this article. The scripts can also be used as a starting point for your own instrumentation and a way to better understand how to write your own SystemTap scripts. The second article in the series will walk through the &lt;code&gt;linetimes.stp&lt;/code&gt; example to teach how you can create or adapt a SystemTap script to your needs.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/06/27/use-systemtap-example-script-trace-kernel-code-operation" title="Use a SystemTap example script to trace kernel code operation"&gt;Use a SystemTap example script to trace kernel code operation&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>William Cohen</dc:creator><dc:date>2022-06-27T07:00:00Z</dc:date></entry><entry><title>The road to JBoss EAP 8</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/06/24/road-jboss-eap-8" /><author><name>James Falkner</name></author><id>a3d6c262-c5b5-4a9d-a479-3e99000ee793</id><updated>2022-06-24T07:00:00Z</updated><published>2022-06-24T07:00:00Z</published><summary type="html">&lt;p&gt;As a leading, open source, &lt;a href="https://jakarta.ee/compatibility/"&gt;Jakarta Enterprise Edition (Jakarta EE)-compatible&lt;/a&gt; application server, &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP) has been a trusted workhorse for enterprise &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; workloads for the past decade. This article describes how the Jakarta EE specifications have evolved since the release of the current version, JBoss EAP 7, and what you can look forward to with JBoss EAP 8.&lt;/p&gt; &lt;p&gt;JBoss EAP 7 is optimized for cloud environments, and when deployed with &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;, offers &lt;a href="https://developers.redhat.com/topics/containers"&gt;containers&lt;/a&gt;, load balancing, elastic scaling, health monitoring, and the ability to deploy to a container directly from the IDE to improve developer productivity and experience.&lt;/p&gt; &lt;h2&gt;Jakarta EE evolution&lt;/h2&gt; &lt;p&gt;Red Hat is one of the founding members of the &lt;a href="https://jakarta.ee/"&gt;Jakarta EE&lt;/a&gt; working group and has been actively involved in innovating and contributing since the earliest days of Java Enterprise Edition (Java EE). After the move of Java EE from Oracle to Jakarta EE at the Eclipse Foundation, &lt;a href="https://jakarta.ee/news/jakarta-ee-8-released/"&gt;Jakarta EE 8 was released&lt;/a&gt; and set the specifications on a much more vendor-neutral footing, a shift championed by Red Hat and other vendors.&lt;/p&gt; &lt;p&gt;The next major release, &lt;a href="https://jakarta.ee/specifications/platform/9/"&gt;Jakarta EE 9&lt;/a&gt;, did not introduce significant new features but instead made the big move of changing the Jakarta API package namespace from &lt;code&gt;javax.*&lt;/code&gt; to &lt;code&gt;jakarta.*&lt;/code&gt;. The name change introduced a major incompatibility with existing programs. Jakarta EE 9 was largely seen as a stepping stone to the next major version, Jakarta EE 10. JBoss EAP does not support this stepping stone because, without compelling new reasons to switch, the adoption of Jakarta EE 9 would have caused unnecessary churn in our customer base and their applications, with no real added value to compensate.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://eclipse-ee4j.github.io/jakartaee-platform/jakartaee10/JakartaEE10#jakarta-ee-10-schedule"&gt;current plan for Jakarta EE 10&lt;/a&gt; calls for a release in Q2 2022 and presents an opportunity to create a significant revision to the platform compared to Jakarta EE 8 (identical to Java EE 8), and Jakarta EE 9 (with the namespace change).&lt;/p&gt; &lt;p&gt;Several specifications under Jakarta EE are getting new features. One of the more prominent is the introduction of a &lt;a href="https://projects.eclipse.org/projects/ee4j.jakartaee-platform/releases/core-profile-10"&gt;Core profile&lt;/a&gt; (complementing the existing Full and Web profiles that have been in Java EE or Jakarta EE for years). The new profile contains a subset of Jakarta EE specifications that are most useful for smaller, focused applications such as microservices, serverless workloads, and natively ahead-of-time compiled apps. The Core profile is a great step forward for the specification and moves Jakarta EE more into the cloud-native and container space.&lt;/p&gt; &lt;h2&gt;What's planned for JBoss EAP 8&lt;/h2&gt; &lt;p&gt;As always, customers should refer to the officially published &lt;a href="https://access.redhat.com/support/policy/updates/jboss_notes"&gt;life cycles of the Runtimes products&lt;/a&gt; (including EAP) to plan upgrades and migrations for their deployed Runtimes. The information in this article is subject to change without notice.&lt;/p&gt; &lt;p&gt;JBoss EAP is based on the upstream &lt;a href="http://wildfly.org"&gt;WildFly&lt;/a&gt; project. That project is &lt;a href="https://www.wildfly.org/news/2022/01/21/WildFly-2022/"&gt;moving to a feature-boxed release&lt;/a&gt; to align more closely with the way Jakarta EE evolves, and the first version of WildFly to support Jakarta EE 10 will be WildFly 27. So keep an eye on WildFly if you want to get a sneak peek of what's to come in JBoss EAP.&lt;/p&gt; &lt;p&gt;The next major EAP release, JBoss EAP 8, is slated for the first half of 2023, with a Beta release targeting the second half of 2022. The Beta release will give customers a chance to test drive the new features but, more importantly, to plan their migration from earlier versions of JBoss EAP. Along with new features will be an update to platform support for newer versions of &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt;, Red Hat OpenShift, Windows, databases, and other dependencies. The final list will be determined closer to release.&lt;/p&gt; &lt;p&gt;Support for the existing version, JBoss EAP 7.x, has been extended in order to provide additional time for current customers to plan their migration to JBoss EAP 8. Consult the &lt;a data-saferedirecturl="https://www.google.com/url?q=https://access.redhat.com/support/policy/updates/jboss_notes%23p_eap&amp;amp;source=gmail&amp;amp;ust=1655388538009000&amp;amp;usg=AOvVaw393mBgGjQ2XOIfUo9dz0ue" href="https://access.redhat.com/support/policy/updates/jboss_notes#p_eap" target="_blank"&gt;Product Support and Update Policy page&lt;/a&gt; for updated support dates for JBoss EAP. &lt;/p&gt; &lt;h2&gt;Product life cycle&lt;/h2&gt; &lt;p&gt;Similar to the current version of JBoss EAP, customers will continue to enjoy long-term support for JBoss EAP 8, corresponding to Red Hat Application Services' &lt;a href="https://access.redhat.com/support/policy/updates/jboss_notes#duration"&gt;Long-life Product Life Cycle&lt;/a&gt;. Coupled with industry-leading &lt;a href="https://www.redhat.com/en/services/support"&gt;24x7 support&lt;/a&gt; and multi-year update and maintenance policies, this commitment gives customers peace of mind that Red Hat can support their most important applications for years to come.&lt;/p&gt; &lt;h2&gt;Migrating to JBoss EAP 8&lt;/h2&gt; &lt;p&gt;EAP 7 continues to be supported based on its &lt;a href="https://access.redhat.com/support/policy/updates/jboss_notes#p_eap"&gt;support life cycle&lt;/a&gt;. Customers should begin planning for migration to EAP 8 to continue to enjoy support beyond the EAP 7 life cycle. As we get closer to EAP 8 Beta later this year, more migration details will be available. But generally, migrations consist of two main areas:  servers and applications.&lt;/p&gt; &lt;h3&gt;Server migration&lt;/h3&gt; &lt;p&gt;This process includes the migration of JBoss EAP configuration files such as &lt;code&gt;standalone.xml&lt;/code&gt;. The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/migration_guide/index#migration_tool_server_migration_tool"&gt;JBoss Server Migration Tool&lt;/a&gt; is the preferred method to update your server configuration to include the new features and settings in new JBoss EAP releases while keeping your existing configuration. The JBoss Server Migration Tool reads your existing JBoss EAP server configuration files and adds configurations for any new subsystems, updates the existing subsystem configurations with new features, and removes any obsolete or "pruned" subsystem configurations.&lt;/p&gt; &lt;p&gt;A preview of this tool will be included as part of the JBoss EAP 8 Beta release. To understand how it works in detail, consult the existing EAP 7 documentation on this migration tool (which will be updated for EAP 8).&lt;/p&gt; &lt;h3&gt;Application migration&lt;/h3&gt; &lt;p&gt;The main migration topic here is the change of Jakarta API namespaces from &lt;code&gt;javax.*&lt;/code&gt; to &lt;code&gt;jakarta.*&lt;/code&gt;. In many cases, this change requires just a simple substitution (and the migration toolkit has new support for things such as &lt;a href="https://docs.openrewrite.org/"&gt;OpenRewrite&lt;/a&gt; recipes to automate this), but not in all cases.&lt;/p&gt; &lt;p&gt;To assist in migrating applications, customers can use the &lt;a href="https://developers.redhat.com/products/mta/overview"&gt;migration toolkit for applications&lt;/a&gt;. This toolkit is an extensible and customizable rule-based set of tools that helps simplify the migration of Java applications. It analyzes the APIs, technologies, and architectures used by the applications you plan to migrate and provides detailed migration reports for each application. This tool will support migrations to JBoss EAP 8 Beta (for testing purposes only) and JBoss EAP 8 GA once it is released. More details on exactly how to migrate to EAP 8 will be available closer to the EAP 8 Beta release.&lt;/p&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/topics/application-modernization"&gt;Application migration and modernization&lt;/a&gt; is a large topic by itself. Red Hat continues to innovate here as well, with new projects such as &lt;a href="https://www.redhat.com/architect/tackle-application-modernization"&gt;Tackle&lt;/a&gt; (part of the &lt;a href="https://www.konveyor.io/"&gt;Konveyor&lt;/a&gt; community), which eases the migration and modernization of applications as they transition to the cloud, containers, and Kubernetes.&lt;/p&gt; &lt;p&gt;Keep watching this publication site, as well as the official new &lt;a href="https://twitter.com/redhatjava"&gt;@RedHatJava Twitter stream&lt;/a&gt;, for more details as we approach the release of JBoss EAP 8.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/06/24/road-jboss-eap-8" title="The road to JBoss EAP 8"&gt;The road to JBoss EAP 8&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>James Falkner</dc:creator><dc:date>2022-06-24T07:00:00Z</dc:date></entry></feed>
